"""
Configuration management for EBL simulation
"""

import json
from pathlib import Path
from dataclasses import dataclass, asdict
from typing import Dict, Any

@dataclass
class MaterialConfig:
    """Material configuration"""
    name: str = "Alucone_XPS"
    composition: str = "Al:1,C:5,H:4,O:2"
    density: float = 1.35  # g/cm³
    thickness: float = 30.0  # nm

@dataclass
class BeamConfig:
    """Beam configuration"""
    energy: float = 100.0  # keV
    spot_size: float = 2.0  # nm
    position_x: float = 0.0  # nm
    position_y: float = 0.0  # nm
    position_z: float = 100.0  # nm
    direction_x: float = 0.0
    direction_y: float = 0.0
    direction_z: float = -1.0

@dataclass
class SimulationConfig:
    """Simulation configuration"""
    num_events: int = 100000
    verbose_level: int = 1
    enable_fluorescence: bool = True
    enable_auger: bool = True
    random_seed: int = -1

class Config:
    """Main configuration class"""
    
    # Material presets
    MATERIAL_PRESETS = {
        "PMMA": {"composition": "C:5,H:8,O:2", "density": 1.19},
        "HSQ": {"composition": "Si:1,H:1,O:1.5", "density": 1.4},
        "ZEP": {"composition": "C:11,H:14,O:1", "density": 1.2},
        "Alucone_XPS": {"composition": "Al:1,C:5,H:4,O:2", "density": 1.35},
        "Alucone_Exposed": {"composition": "Al:1,C:5,H:4,O:3", "density": 1.40},
        "Custom": {"composition": "", "density": 1.0}
    }
    
    def __init__(self):
        self.material = MaterialConfig()
        self.beam = BeamConfig()
        self.simulation = SimulationConfig()
        
        # Paths
        self.executable_path = self._find_executable()
        self.output_directory = "data/output"
        self.macro_directory = "macros"
        
        # Load default configuration if exists
        self.config_file = Path.home() / ".ebl_sim" / "config.json"
        if self.config_file.exists():
            self.load_from_file(self.config_file)
    
    def _find_executable(self) -> str:
        """Try to find the EBL simulation executable"""
        possible_paths = [
            Path("../../build/bin/ebl_sim.exe"),
            Path("../../out/build/x64-Release/bin/ebl_sim.exe"),
            Path("C:/Users/dreec/Geant4Projects/EBLSimulation/build/bin/ebl_sim.exe"),
        ]
        
        for path in possible_paths:
            if path.exists():
                return str(path.absolute())
        
        return "ebl_sim.exe"  # Default
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert configuration to dictionary"""
        return {
            "material": asdict(self.material),
            "beam": asdict(self.beam),
            "simulation": asdict(self.simulation),
            "paths": {
                "executable": self.executable_path,
                "output": self.output_directory,
                "macros": self.macro_directory
            }
        }
    
    def from_dict(self, data: Dict[str, Any]):
        """Load configuration from dictionary"""
        if "material" in data:
            self.material = MaterialConfig(**data["material"])
        if "beam" in data:
            self.beam = BeamConfig(**data["beam"])
        if "simulation" in data:
            self.simulation = SimulationConfig(**data["simulation"])
        if "paths" in data:
            self.executable_path = data["paths"].get("executable", self.executable_path)
            self.output_directory = data["paths"].get("output", self.output_directory)
            self.macro_directory = data["paths"].get("macros", self.macro_directory)
    
    def save_to_file(self, filepath: Path = None):
        """Save configuration to JSON file"""
        if filepath is None:
            filepath = self.config_file
        
        filepath.parent.mkdir(parents=True, exist_ok=True)
        
        with open(filepath, 'w') as f:
            json.dump(self.to_dict(), f, indent=2)
    
    def load_from_file(self, filepath: Path = None):
        """Load configuration from JSON file"""
        if filepath is None:
            filepath = self.config_file
        
        if filepath.exists():
            with open(filepath, 'r') as f:
                data = json.load(f)
                self.from_dict(data)
    
    def generate_macro(self) -> str:
        """Generate Geant4 macro from configuration"""
        macro = f"""# EBL Simulation Macro - Generated by GUI
# Material: {self.material.name}

/run/verbose {self.simulation.verbose_level}
/event/verbose {max(0, self.simulation.verbose_level - 1)}
/tracking/verbose {max(0, self.simulation.verbose_level - 2)}

/run/initialize

# Material properties
/det/setResistComposition "{self.material.composition}"
/det/setResistThickness {self.material.thickness} nm
/det/setResistDensity {self.material.density} g/cm3
/det/update

# Physics settings
/process/em/fluo {1 if self.simulation.enable_fluorescence else 0}
/process/em/auger {1 if self.simulation.enable_auger else 0}

# Beam parameters
/gun/particle e-
/gun/energy {self.beam.energy} keV
/gun/position {self.beam.position_x} {self.beam.position_y} {self.beam.position_z} nm
/gun/direction {self.beam.direction_x} {self.beam.direction_y} {self.beam.direction_z}
/gun/beamSize {self.beam.spot_size} nm

# Run simulation
/run/beamOn {self.simulation.num_events}
"""
        return macro